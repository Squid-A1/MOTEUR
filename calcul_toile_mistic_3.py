# -*- coding: utf-8 -*-
"""Calcul Toile - Mistic 3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Lu_x8IS3KS1QSA1Ro7iVvP3fFGtsmFVD
"""



import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML

# Provided price data
price_data = {
    24: {24: 206, 30: 208, 36: 211, 42: 214, 48: 216, 54: 218, 60: 221, 66: 224, 72: 226, 78: 229, 84: 232, 90: 234, 96: 237, 102: 239, 108: 245, 114: 247, 120: 250, 126: 253, 132: 255, 138: 257, 144: 260},
    30: {24: 215, 30: 217, 36: 220, 42: 224, 48: 227, 54: 230, 60: 233, 66: 236, 72: 239, 78: 243, 84: 246, 90: 249, 96: 252, 102: 255, 108: 262, 114: 265, 120: 268, 126: 272, 132: 275, 138: 278, 144: 281},
    36: {24: 223, 30: 226, 36: 230, 42: 234, 48: 238, 54: 241, 60: 245, 66: 249, 72: 252, 78: 257, 84: 260, 90: 264, 96: 268, 102: 271, 108: 280, 114: 283, 120: 287, 126: 291, 132: 295, 138: 298, 144: 302},
    42: {24: 231, 30: 235, 36: 240, 42: 244, 48: 248, 54: 252, 60: 257, 66: 261, 72: 266, 78: 270, 84: 274, 90: 279, 96: 283, 102: 287, 108: 297, 114: 301, 120: 305, 126: 310, 132: 314, 138: 319, 144: 323},
    48: {24: 240, 30: 244, 36: 249, 42: 254, 48: 259, 54: 264, 60: 269, 66: 274, 72: 279, 78: 284, 84: 289, 90: 294, 96: 299, 102: 303, 108: 313, 114: 318, 120: 324, 126: 329, 132: 334, 138: 339, 144: 344},
    54: {24: 248, 30: 253, 36: 259, 42: 264, 48: 270, 54: 275, 60: 281, 66: 286, 72: 292, 78: 298, 84: 303, 90: 309, 96: 314, 102: 319, 108: 332, 114: 337, 120: 343, 126: 349, 132: 354, 138: 359, 144: 365},
    60: {24: 256, 30: 262, 36: 268, 42: 275, 48: 281, 54: 286, 60: 293, 66: 299, 72: 305, 78: 311, 84: 317, 90: 324, 96: 330, 102: 335, 108: 349, 114: 355, 120: 361, 126: 368, 132: 374, 138: 380, 144: 385},
    66: {24: 265, 30: 271, 36: 278, 42: 285, 48: 291, 54: 299, 60: 305, 66: 311, 72: 318, 78: 324, 84: 332, 90: 339, 96: 345, 102: 352, 108: 367, 114: 373, 120: 380, 126: 386, 132: 393, 138: 400, 144: 406},
    72: {24: 273, 30: 280, 36: 287, 42: 295, 48: 302, 54: 309, 60: 317, 66: 324, 72: 331, 78: 336, 84: 344, 90: 353, 96: 361, 102: 368, 108: 384, 114: 391, 120: 398, 126: 406, 132: 413, 138: 420, 144: 427},
    78: {24: 282, 30: 289, 36: 297, 42: 305, 48: 313, 54: 320, 60: 329, 66: 336, 72: 344, 78: 352, 84: 360, 90: 368, 96: 376, 102: 384, 108: 402, 114: 409, 120: 417, 126: 425, 132: 433, 138: 441, 144: 448},
    84: {24: 300, 30: 309, 36: 317, 42: 326, 48: 334, 54: 342, 60: 351, 66: 359, 72: 368, 78: 377, 84: 385, 90: 394, 96: 402, 102: 410, 108: 419, 114: 427, 120: 436, 126: 444, 132: 453, 138: 461, 144: 469},
    90: {24: 310, 30: 318, 36: 327, 42: 337, 48: 345, 54: 354, 60: 364, 66: 372, 72: 380, 78: 391, 84: 400, 90: 409, 96: 418, 102: 427, 108: 436, 114: 445, 120: 454, 126: 463, 132: 472, 138: 480, 144: 488},
    96: {24: 319, 30: 328, 36: 338, 42: 347, 48: 357, 54: 366, 60: 376, 66: 386, 72: 396, 78: 406, 84: 415, 90: 425, 96: 434, 102: 444, 108: 453, 114: 462, 120: 471, 126: 480, 132: 490, 138: 499, 144: 508},
    102: {24: 355, 30: 365, 36: 375, 42: 386, 48: 396, 54: 406, 60: 416, 66: 426, 72: 437, 78: 447, 84: 457, 90: 468, 96: 478, 102: 488, 108: 506, 114: 517, 120: 527, 126: 538, 132: 549, 138: 559, 144: 568},
    108: {24: 366, 30: 376, 36: 387, 42: 398, 48: 409, 54: 419, 60: 430, 66: 441, 72: 452, 78: 463, 84: 474, 90: 485, 96: 496, 102: 506, 108: 517, 114: 528, 120: 539, 126: 550, 132: 561, 138: 572, 144: 583},
    114: {24: 376, 30: 388, 36: 399, 42: 411, 48: 422, 54: 433, 60: 445, 66: 456, 72: 467, 78: 479, 84: 490, 90: 502, 96: 513, 102: 525, 108: 536, 114: 548, 120: 559, 126: 570, 132: 582, 138: 593, 144: 604},
    120: {24: 387, 30: 399, 36: 411, 42: 423, 48: 435, 54: 447, 60: 459, 66: 471, 72: 483, 78: 495, 84: 507, 90: 519, 96: 531, 102: 543, 108: 555, 114: 567, 120: 579, 126: 591, 132: 603, 138: 615, 144: 627},
    126: {24: 398, 30: 410, 36: 423, 42: 436, 48: 448, 54: 460, 60: 473, 66: 486, 72: 498, 78: 511, 84: 524, 90: 537, 96: 549, 102: 561, 108: 574, 114: 587, 120: 599, 126: 612, 132: 625, 138: 637, 144: 649},
    132: {24: 409, 30: 422, 36: 435, 42: 448, 48: 461, 54: 474, 60: 487, 66: 500, 72: 514, 78: 527, 84: 540, 90: 554, 96: 567, 102: 580, 108: 593, 114: 606, 120: 619, 126: 633, 132: 646, 138: 659, 144: 672},
    138: {24: 419, 30: 433, 36: 447, 42: 461, 48: 474, 54: 488, 60: 502, 66: 515, 72: 529, 78: 543, 84: 557, 90: 571, 96: 585, 102: 598, 108: 612, 114: 626, 120: 639, 126: 654, 132: 667, 138: 681, 144: 694},
    144: {24: 430, 30: 444, 36: 458, 42: 473, 48: 487, 54: 501, 60: 516, 66: 530, 72: 545, 78: 559, 84: 574, 90: 588, 96: 602, 102: 617, 108: 631, 114: 645, 120: 660, 126: 675, 132: 689, 138: 703, 144: 717}
}

# Function to get the price
def get_price(width, height):
    # Handle both width x height and height x width cases
    return price_data.get(width, {}).get(height) or price_data.get(height, {}).get(width)

# Create widgets for selecting width and height
width_input = widgets.FloatText(value=24, description='Largeur (inches):', step=1)
height_input = widgets.FloatText(value=120, description='Hauteur (inches):', step=1)

# Output widget for displaying the price
output_price = widgets.Output()

# Button to get the result
validate_button = widgets.Button(description="VALIDÉ")

# Display result
def show_price(b):
    with output_price:
        # Clear previous output
        output_price.clear_output()

        # Get the selected width and height
        width = width_input.value
        height = height_input.value

        # Get the price
        price = get_price(width, height)

        # Display the result
        if price is None:
            display(HTML(f"<h3>Le prix de votre store {width} x {height} est indisponible</h3>"))
        else:
            display(HTML(f"<h3>Le prix de votre store {width} x {height} est de: ${price}</h3>"))

# Link the button click event to the function
validate_button.on_click(show_price)

# Somfy motor data with image URLs
somfy_products = [
    {"Product Name": "SONESSE 28 FILAIRE", "Min Width": 15, "Max Width": 96, "Max Size (ft²)": 64,
     "Type": "Filaire", "Power (Nw)": 0.8, "Price": 152.55, "Remote 1 Canal": 79.60, "Charger": 0.00,
     "Total": 232.15, "Image URL": "https://www.storesbm.com/pdf/r28_filaire.pdf"},
    {"Product Name": "SONESSE 28 WIREFREE", "Min Width": 22.75, "Max Width": 96, "Max Size (ft²)": 64,
     "Type": "Rechargeable, Batterie", "Power (Nw)": 1.1, "Price": 250.20, "Remote 1 Canal": 79.60,
     "Charger": 23.65, "Total": 353.45, "Image URL": "https://www.storesbm.com/pdf/28_rechargeable.pdf"},
    {"Product Name": "SONESSE 30 FILAIRE", "Min Width": 19, "Max Width": 115, "Max Size (ft²)": 80,
     "Type": "Filaire", "Power (Nw)": 2.0, "Price": 247.50, "Remote 1 Canal": 79.60, "Charger": 0.00,
     "Total": 327.10, "Image URL": "https://www.storesbm.com/pdf/30_filaire.pdf"},
    {"Product Name": "SONESSE 30 WIREFREE", "Min Width": 25, "Max Width": 115, "Max Size (ft²)": 80,
     "Type": "Rechargeable, Batterie", "Power (Nw)": 2.0, "Price": 320.11, "Remote 1 Canal": 79.60,
     "Charger": 23.65, "Total": 423.36, "Image URL": "https://www.storesbm.com/pdf/30_rechargeable.pdf"},
    {"Product Name": "SONESSE 30 ULTRA WIREFREE", "Min Width": 27, "Max Width": 115, "Max Size (ft²)": 80,
     "Type": "Rechargeable, Batterie", "Power (Nw)": 2.0, "Price": 334.28, "Remote 1 Canal": 79.60,
     "Charger": 23.65, "Total": 437.53, "Image URL": "https://www.storesbm.com/pdf/30_ultra.pdf"},
    {"Product Name": "SONESSE 40 FILAIRE", "Min Width": 23.75, "Max Width": 144, "Max Size (ft²)": 120,
     "Type": "Filaire", "Power (Nw)": 4.0, "Price": 459.32, "Remote 1 Canal": 79.60, "Charger": 0.00,
     "Total": 538.92, "Image URL": "https://www.storesbm.com/pdf/40_filaire.pdf"},
    {"Product Name": "SONESSE 40 WIREFREE", "Min Width": 29, "Max Width": 144, "Max Size (ft²)": 120,
     "Type": "Rechargeable, Batterie", "Power (Nw)": 3.0, "Price": 488.72, "Remote 1 Canal": 79.60,
     "Charger": 23.65, "Total": 591.97, "Image URL": "https://www.storesbm.com/pdf/40_rechargeable.pdf"},
    {"Product Name": "SONESSE 50 FILAIRE", "Min Width": 34.5, "Max Width": 144, "Max Size (ft²)": 120,
     "Type": "Filaire", "Power (Nw)": 6.0, "Price": 534.00, "Remote 1 Canal": 79.60, "Charger": 0.00,
     "Total": 613.60, "Image URL": "https://www.storesbm.com/pdf/50_filaire120v.pdf"},
    {"Product Name": "SONESSE 50 ULTRA FILAIRE", "Min Width": 35, "Max Width": 144, "Max Size (ft²)": 120,
     "Type": "Filaire", "Power (Nw)": 4.0, "Price": 677.48, "Remote 1 Canal": 79.60, "Charger": 0.00,
     "Total": 757.08, "Image URL": "https://www.storesbm.com/pdf/50_ultra24v.pdf"},
    {"Product Name": "SONESSE 50 FILAIRE 6NW", "Min Width": 28.75, "Max Width": 156, "Max Size (ft²)": 120,
     "Type": "Filaire", "Power (Nw)": 6.0, "Price": 444.06, "Remote 1 Canal": 79.60, "Charger": 0.00,
     "Total": 523.66, "Image URL": "https://www.storesbm.com/pdf/50_filaire6nm.pdf"},
    {"Product Name": "SONESSE 50 FILAIRE 10NW", "Min Width": 28.75, "Max Width": 156, "Max Size (ft²)": 120,
     "Type": "Filaire", "Power (Nw)": 10.0, "Price": 573.89, "Remote 1 Canal": 79.60, "Charger": 0.00,
     "Total": 653.49, "Image URL": "https://www.storesbm.com/pdf/50_filaire10nm.pdf"},
    {"Product Name": "MAESTRIA", "Min Width": 29.5, "Max Width": None, "Max Size (ft²)": None,
     "Type": "Filaire", "Power (Nw)": None, "Price": 518.77, "Remote 1 Canal": 79.60, "Charger": 0.00,
     "Total": 598.37, "Image URL": "https://www.somfysystems.com/en-us/products/1134082/maestria-rts-510a2"}
]

# SBM motor data with image URLs
sbm_products = [
    {"Product Name": "SI-SIMPLE", "Min Width": 19.75, "Max Width": 72, "Max Size (ft²)": 36,
     "Type": "Rechargeable, à bâton", "Power (Nw)": 0.8, "Price": 49.50, "Remote 1 Canal": 28.05, "Charger": 20.66,
     "Total": 98.21, "Image URL": "https://www.storesbm.com/pdf/Si-simple.pdf"},
    {"Product Name": "VOLTA", "Min Width": 12.75, "Max Width": 96, "Max Size (ft²)": 64,
     "Type": "Filaire", "Power (Nw)": 1.1, "Price": 75.74, "Remote 1 Canal": 28.05, "Charger": 0.00,
     "Total": 103.79, "Image URL": "https://www.storesbm.com/pdf/volta.pdf"},
    {"Product Name": "SOLO BLUETOOTH", "Min Width": 19.75, "Max Width": 96, "Max Size (ft²)": 64,
     "Type": "Rechargeable, Batterie", "Power (Nw)": 2.0, "Price": 73.13, "Remote 1 Canal": 28.05, "Charger": 20.66,
     "Total": 121.84, "Image URL": "https://www.storesbm.com/pdf/solo.pdf"},
    {"Product Name": "SOLO", "Min Width": 19.75, "Max Width": 96, "Max Size (ft²)": 64,
     "Type": "Rechargeable, Batterie", "Power (Nw)": 2.0, "Price": 75.74, "Remote 1 Canal": 28.05, "Charger": 20.66,
     "Total": 124.45, "Image URL": "https://www.storesbm.com/pdf/solo.pdf"},
    {"Product Name": "MOVEO", "Min Width": 23.625, "Max Width": 96, "Max Size (ft²)": 64,
     "Type": "Filaire", "Power (Nw)": 2.0, "Price": 112.46, "Remote 1 Canal": 28.05, "Charger": 0.00,
     "Total": 140.51, "Image URL": "https://www.storesbm.com/pdf/moveo.pdf"},
    {"Product Name": "SOLO 2NW", "Min Width": 23.625, "Max Width": 115, "Max Size (ft²)": 80,
     "Type": "Rechargeable, Batterie", "Power (Nw)": 4.0, "Price": 157.50, "Remote 1 Canal": 28.05, "Charger": 20.66,
     "Total": 206.21, "Image URL": "https://www.storesbm.com/pdf/solo.pdf"}
]

# Convert the product lists to DataFrames for easier manipulation
somfy_df = pd.DataFrame(somfy_products)
sbm_df = pd.DataFrame(sbm_products)

# Function to filter motors based on user inputs
def filter_motors(largeur, hauteur, motor_type, motor_brand):
    # Convert largeur and hauteur from inches to feet
    largeur_ft = largeur / 12
    hauteur_ft = hauteur / 12

    # Calculate the area in square feet
    area = largeur_ft * hauteur_ft

    # Select motors based on the motor brand
    if motor_brand == 'Somfy':
        motor_df = somfy_df[somfy_df["Type"].str.contains(motor_type, case=False)]
    elif motor_brand == 'SBM':
        motor_df = sbm_df[sbm_df["Type"].str.contains(motor_type, case=False)]

    # Filter motors by checking if the LARGEUR is within the valid range (Min Width <= WIDTH <= Max Width)
    motor_df = motor_df[(motor_df["Min Width"] <= largeur) & (motor_df["Max Width"] >= largeur)]

    # Filter motors based on area: Only motors with Max Size greater than or equal to the area
    motor_df = motor_df[motor_df["Max Size (ft²)"] >= area]

    # For Filaire motors, add the Remote price to the Total
    motor_df.loc[motor_df['Type'] == 'Filaire', 'Total'] = motor_df['Price'] + motor_df['Remote 1 Canal']

    # For Rechargeable motors, add both Remote and Charger to the Total and show Charger
    motor_df.loc[motor_df['Type'].str.contains('Rechargeable', case=False), 'Total'] = motor_df['Price'] + motor_df['Remote 1 Canal'] + motor_df['Charger']

    # If no motors match the criteria, return None to show a message
    if motor_df.empty:
        return None, "Aucun moteur ne correspond à votre recherche."

    return motor_df, None

# Create widgets for motor selection
motor_type_dropdown = widgets.Dropdown(
    options=['Filaire', 'Rechargeable'],
    value='Filaire',
    description='Type MOTEUR:'
)

motor_brand_dropdown = widgets.Dropdown(
    options=['Somfy', 'SBM'],
    value='Somfy',
    description='Marque MOTEUR:'
)

# Create the "MOTORISEZ VOTRE STORE" button
motorise_button = widgets.Button(description="MOTORISEZ VOTRE STORE")


# Output widget for displaying the motor selection results
output_motor = widgets.Output()

# Function to display motor selection
def on_motorise_button_clicked(b):
    with output_motor:
        # Clear previous output
        output_motor.clear_output()

        # Get the selected width, height, motor type, and motor brand
        width = width_input.value
        height = height_input.value
        motor_type = motor_type_dropdown.value
        motor_brand = motor_brand_dropdown.value

        # Filter motors based on user input
        filtered_motors, error_message = filter_motors(width, height, motor_type, motor_brand)

        # Display the result
        if filtered_motors is None:
             display(HTML(f"<h3>{error_message}</h3>"))
        else:
            display(HTML("<h3>Les moteurs suivants correspondent à votre sélection:</h3>"))
            display(filtered_motors)


# Link the button click event to the function
motorise_button.on_click(on_motorise_button_clicked)


# Display the widgets and results
display(width_input, height_input, validate_button, output_price, motor_type_dropdown, motor_brand_dropdown, motorise_button, output_motor)